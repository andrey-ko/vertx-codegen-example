buildscript {
  repositories {
    mavenCentral()
    jcenter()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    classpath "com.satori:satori-libs-gradle-transform:$composerVersion"
    classpath "com.satori:satori-libs-gradle-codegen:$composerVersion"
  }
}

allprojects {
  group group
  version version
  buildDir ".out"
}

subprojects {
  apply plugin: "com.satori.transform"
  apply plugin: "com.satori.codegen"

  apply plugin: "java"

  compileJava.options.compilerArgs << "-Xlint:unchecked"
  compileJava.options.compilerArgs << "-Xlint:deprecation"

  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8

  sourceSets.main.java.srcDirs = ['src']
  sourceSets.main.resources.srcDirs = ['res']
  sourceSets.test.java.srcDirs = ['tests/src']
  sourceSets.test.resources.srcDirs = ['tests/res']

  repositories {
    mavenCentral()
  }

  dependencies {
    compile "io.vertx:vertx-core:$vertxVersion"
    compile "io.vertx:vertx-codegen:$vertxVersion"
    //compile "io.vertx:vertx-rx-java:$vertxVersion"
    compile "io.vertx:vertx-service-proxy:$vertxVersion"
  }

  ext {
    pckg = "$group.${rootProject.name.replaceAll(~/[^\w]+/, ".")}"
    pckgDir = pckg.replace(".", "/")
  }

  task createDefaultProjectStructure {
    group 'codegen'
    doLast {
      println "creating default project structure for project '${project.name}'..."

      // create directories for all source sets
      sourceSets.forEach { sourceSet ->
        sourceSet.java.srcDirs.forEach {
          def pathToCreate = new File(it, pckgDir)
          println "creating sources path for '${sourceSet.name}': '$pathToCreate'"
          pathToCreate.mkdirs()
        }
        sourceSet.resources.srcDirs.forEach {
          def pathToCreate = new File(it, pckgDir)
          println "creating resources path for '${sourceSet.name}': '$pathToCreate'"
          pathToCreate.mkdirs()
        }
      }

      // generate build.gradle
      if (!file("build.gradle").exists() && file("build.template.gradle").exists()) {
        println "creating build.gadle: '${file('build.gradle')}'"
        transform {
          template = rootProject.file('build.template.gradle')
          output = file('build.gradle')
        }
      }
    }
  }
}

